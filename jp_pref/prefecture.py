# AUTOGENERATED! DO NOT EDIT! File to edit: 10_pref.ipynb (unless otherwise specified).

__all__ = ['df', 'name2code', 'code2name', 'alphabet2name', 'name2alphabet']

# Internal Cell
from typing import List

from fastcore.basics import patch
from fastcore.dispatch import typedispatch

# Internal Cell


import pandas as pd

# 都道府県正式名称
names = {
    "北海道" : 'Hokkaido',
    "青森県" : 'Aomori',
    "岩手県" : 'Iwate',
    "宮城県" : 'Miyagi',
    "秋田県" : 'Akita',
    "山形県" : 'Yamagata',
    "福島県" : 'Fukushima',
    "茨城県" : 'Ibaraki',
    "栃木県" : 'Tochigi',
    "群馬県" : 'Gunma',
    "埼玉県" : 'Saitama',
    "千葉県" : 'Chiba',
    "東京都" : 'Tokyo',
    "神奈川県" : 'Kanagawa',
    "新潟県" : 'Niigata',
    "富山県" : 'Toyama',
    "石川県" : 'Ishikawa',
    "福井県" : 'Fukui',
    "山梨県" : 'Yamanashi',
    "長野県" : 'Nagano',
    "岐阜県" : 'Gifu',
    "静岡県" : 'Shizuoka',
    "愛知県" : 'Aichi',
    "三重県" : 'Mie',
    "滋賀県" : 'Shiga',
    "京都府" : 'Kyoto',
    "大阪府" : 'Osaka',
    "兵庫県" : 'Hyogo',
    "奈良県" : 'Nara',
    "和歌山県" : 'Wakayama',
    "鳥取県" : 'Tottori',
    "島根県" : 'Shimane',
    "岡山県" : 'Okayama',
    "広島県" : 'Hiroshima',
    "山口県" : 'Yamaguchi',
    "徳島県" : 'Tokushima',
    "香川県" : 'Kagawa',
    "愛媛県" : 'Ehime',
    "高知県" : 'Kochi',
    "福岡県" : 'Fukuoka',
    "佐賀県" : 'Saga',
    "長崎県" : 'Nagasaki',
    "熊本県" : 'Kumamoto',
    "大分県" : 'Oita',
    "宮崎県" : 'Miyazaki',
    "鹿児島県" : 'Kagoshima',
    "沖縄県" : 'Okinawa',
}

# Internal Cell
# 都道府県の略名
full_names = [p for p in names.keys()]
short_names = [p[:-1] for p in names.keys()]
alphabet_names = [p for p in names.values()]

# Cell
# 都道府県データフレーム. Index に日本都道府県コード（JIS X 0401-1973）を設定
df = pd.DataFrame(
    dict(
        name=full_names,
        short_name=short_names,
        alphabet_name=alphabet_names,
    ),
    index=pd.Index(range(1, 1 + len(names)), name="code"),
)

# Internal Cell
__code2name = {
    code: name
    for name, code in zip(df.name, df.index)
}

# Internal Cell
__name2code = {
    **{name: code for name, code in zip(df.name, df.index)},
    **{name: code for name, code in zip(df.short_name, df.index)},
    **{name: code for name, code in zip(df.alphabet_name, df.index)},
}

# Cell
def name2code():
    """ Dummy method to get exported to __all__ """
    pass

@typedispatch
def name2code(name: str) -> int:
    """ Convert prefecture name to code """
    return __name2code[name]

@typedispatch
def name2code(arr: List) -> List:
    """ Convert a list of prefecture name to codes """
    return [__name2code[e] for e in arr]

@typedispatch
def name2code(s: pd.Series) -> pd.Series:
    """ Convert a pandas series of prefecture name to codes """
    return s.map(__name2code)

# Cell
def code2name():
    """ Dummy method to get exported to __all__ """
    pass

@typedispatch
def code2name(code: int) -> str:
    """ Convert prefecture code to name """
    return __code2name[code]

@typedispatch
def code2name(arr: List) -> List:
    """ Convert a list of prefecture code to names """
    return [__code2name[e] for e in arr]

@typedispatch
def code2name(s: pd.Series) -> pd.Series:
    """ Convert a pandas series of prefecture code to names """
    return s.map(__code2name)

# Interna Cell
__alphabet2name = {
    alphabet: name
    for alphabet, name in zip(df.alphabet_name, df.name)
}

__name2alphabet = {
    **{name: alphabet for name, alphabet in zip(df.name, df.alphabet_name)},
    **{name: alphabet for name, alphabet in zip(df.short_name, df.alphabet_name)},
}

def name2alphabet():
    """ Dummy method to get exported to __all__ """
    pass

def alphabet2name():
    """ Dummy method to get exported to __all__ """
    pass

@typedispatch
def name2alphabet(name: str) -> str:
    """ Convert a prefecture name to alphabet_name """
    return __name2alphabet[name]

@typedispatch
def name2alphabet(arr: list) -> list:
    """ Convert a list of prefecture name to alphabet_name """
    return [__name2alphabet[e] for e in arr]

@typedispatch
def name2alphabet(s: pd.Series) -> pd.Series:
    """ Convert a pandas series of prefecture name to alphabet_name """
    return s.map(__name2alphabet)

@typedispatch
def alphabet2name(alphabet_name: str) -> str:
    """ Convert a prefecture alphabet_name to name """
    return __alphabet2name[alphabet_name]

@typedispatch
def alphabet2name(arr: list) -> list:
    """ Convert a list of prefecture alphabet_name to name """
    return [__alphabet2name[e] for e in arr]

@typedispatch
def alphabet2name(s: pd.Series) -> pd.Series:
    """ Convert a pandas series of prefecture alphabet_name to name """
    return s.map(__name2alphabet)
